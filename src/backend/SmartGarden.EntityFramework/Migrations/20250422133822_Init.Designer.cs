// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartGarden.EntityFramework;

#nullable disable

namespace SmartGarden.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250422133822_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BedActuator", b =>
                {
                    b.Property<Guid>("BedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActuatorId")
                        .HasColumnType("uuid");

                    b.HasKey("BedId", "ActuatorId");

                    b.HasIndex("ActuatorId");

                    b.ToTable("BedActuator");
                });

            modelBuilder.Entity("BedSensor", b =>
                {
                    b.Property<Guid>("BedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uuid");

                    b.HasKey("BedId", "SensorId");

                    b.HasIndex("SensorId");

                    b.ToTable("BedSensor");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.Actuator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Actuator");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.ActuatorAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActuatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Icon")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActuatorId");

                    b.ToTable("ActuatorAction");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.Bed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.PlantSensorConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<double>("RangeFrom")
                        .HasColumnType("double precision");

                    b.Property<double>("RangeTo")
                        .HasColumnType("double precision");

                    b.Property<int>("SensorType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantSensorConfig");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Max")
                        .HasColumnType("double precision");

                    b.Property<double>("Min")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("BedActuator", b =>
                {
                    b.HasOne("SmartGarden.EntityFramework.Models.Actuator", null)
                        .WithMany()
                        .HasForeignKey("ActuatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarden.EntityFramework.Models.Bed", null)
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BedSensor", b =>
                {
                    b.HasOne("SmartGarden.EntityFramework.Models.Bed", null)
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarden.EntityFramework.Models.Sensor", null)
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.ActuatorAction", b =>
                {
                    b.HasOne("SmartGarden.EntityFramework.Models.Actuator", null)
                        .WithMany("Actions")
                        .HasForeignKey("ActuatorId");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.Bed", b =>
                {
                    b.HasOne("SmartGarden.EntityFramework.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.PlantSensorConfig", b =>
                {
                    b.HasOne("SmartGarden.EntityFramework.Models.Plant", null)
                        .WithMany("SensorConfigs")
                        .HasForeignKey("PlantId");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.Actuator", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("SmartGarden.EntityFramework.Models.Plant", b =>
                {
                    b.Navigation("SensorConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
